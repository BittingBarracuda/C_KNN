#include "matrix.h"

int check_dimensions(matrix* m1, matrix* m2);
int can_dot(matrix* m1, matrix* m2);
double sum(matrix* m);
double max_rows(matrix* m);
double min_rows(matrix* m);
int* max_rows_index(matrix* m);
int* min_rows_index(matrix* m);
matrix* sum_rows(matrix* m);
matrix* sum_cols(matrix* m);
double prod(matrix* m);
matrix* abs_mat(matrix* m);
matrix* add(matrix* m1, matrix* m2);
matrix* sub(matrix* m1, matrix* m2);
matrix* mult(matrix* m1 , matrix* m2);
matrix* div(matrix* m1, matrix* m2);
matrix* power(matrix* m1, int p);
matrix* apply(matrix* m1, double (*f)(double));
matrix* dot(matrix* m1, matrix* m2);
matrix* scale(matrix* m1, double c);
matrix* scalar_sum(matrix* m1, double c);
void abs_mat_inplace(matrix* m);
void add_inplace(matrix* m1, matrix* m2);
void sub_inplace(matrix* m1, matrix* m2);
void mult_inplace(matrix* m1 , matrix* m2);
void div_inplace(matrix* m1, matrix* m2);
void power_inplace(matrix* m1, int p);
void apply_inplace(matrix* m1, double (*f)(double));
void scale_inplace(matrix* m1, double c);
void scalar_sum_inplace(matrix* m1, double c);
void save_matrix(matrix* m1, char* file_name);
matrix* read_matrix(char* file_name);
void shuffle(matrix* m);
void shuffle_with_classes(matrix* m, int* classes);
void get_matrix_split(matrix* m, matrix* s1, matrix* s2, double split);